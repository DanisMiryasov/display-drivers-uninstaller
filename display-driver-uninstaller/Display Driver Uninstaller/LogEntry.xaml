<UserControl x:Class="LogEntry"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:Display_Driver_Uninstaller"
			 xmlns:conv="clr-namespace:Display_Driver_Uninstaller.Converters"
			 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" d:DesignHeight="239" d:DesignWidth="572">

	<UserControl.Resources>
		<Color x:Key="cNormal">Black</Color>	
		<Color x:Key="cValue">#FF0000D2</Color>
		<Color x:Key="cWarning">Black</Color>
		<Color x:Key="cError">Red</Color>

		<SolidColorBrush x:Key="bNormal" Color="{StaticResource cNormal}"/>
		<SolidColorBrush x:Key="bValue" Color="{StaticResource cValue}"/>
		<SolidColorBrush x:Key="bWarning" Color="{StaticResource cWarning}"/>
		<SolidColorBrush x:Key="bError" Color="{StaticResource cError}"/>

		<Style x:Key="styleNormal" TargetType="{x:Type TextBlock}">
			<Setter Property="Foreground" Value="{StaticResource bNormal}"/>
			<Setter Property="FontWeight" Value="Bold"/>
			<Setter Property="FontSize" Value="12"/>
		</Style>	
		<Style x:Key="styleValue" TargetType="{x:Type TextBlock}">
			<Setter Property="Foreground" Value="{DynamicResource bValue}"/>
			<Setter Property="FontWeight" Value="Normal"/>
			<Setter Property="FontSize" Value="12"/>
		</Style>
		
		<LinearGradientBrush x:Key="bgBrushEvent" EndPoint="1,0.5" StartPoint="0,0.5">
			<GradientStop Color="#FFBEC8FF" Offset="0" />
			<GradientStop Color="#FFFFFFFF" Offset="1" />
		</LinearGradientBrush>
		<LinearGradientBrush x:Key="bgBrushWarning" EndPoint="1,0.5" StartPoint="0,0.5">
			<GradientStop Color="#FFFFFFB4" Offset="0" />
			<GradientStop Color="#FFFFFFFF" Offset="1" />
		</LinearGradientBrush>
		<LinearGradientBrush x:Key="bgBrushError" EndPoint="1,0.5" StartPoint="0,0.5">
			<GradientStop Color="#FFFFE6E6" Offset="0" />
			<GradientStop Color="#FFFFFFFF" Offset="1" />
		</LinearGradientBrush>
		
		<conv:BooleanToVisibilityConverter x:Key="BoolToVisibility" TrueValue="Visible" FalseValue="Collapsed" />
		<conv:LogTypeIsType x:Key="IsType" Reversed="False" />
		<conv:LogTypeIsType x:Key="IsNotType" Reversed="True"/>
		<conv:BooleanToColor x:Key="BoolToColor" Reversed="False" TrueValue="{StaticResource cValue}" FalseValue="{StaticResource cNormal}"/>
		<conv:BooleanToFontWeight x:Key="BoolToBold" Reversed="False" TrueValue="Normal" FalseValue="Bold"/>
		<conv:BooleanToStyle x:Key="BoolToStyle" Reversed="False" TrueValue="{StaticResource styleNormal}" FalseValue="{StaticResource styleValue}"/>
		<conv:BooleanToStyle x:Key="NotBoolToStyle" Reversed="True" TrueValue="{StaticResource styleNormal}" FalseValue="{StaticResource styleValue}"/>

		<conv:LogTypeToBrush x:Key="TypeToBrush" Brush1="{StaticResource bNormal}" Brush2="{StaticResource bWarning}" Brush3="{StaticResource bError}"/>
		<conv:LogTypeToBrush x:Key="TypeToBrushBg" Brush1="{StaticResource bgBrushEvent}" Brush2="{StaticResource bgBrushWarning}" Brush3="{StaticResource bgBrushError}"/>
		
		<conv:StringIsNotNullOrEmpty x:Key="NullOrEmpty" Reversed="True" />
		<conv:StringIsNotNullOrEmpty x:Key="NotNullOrEmpty" Reversed="False" />
		<conv:CombiningConverter x:Key="NullToVis" Converter1="{StaticResource NullOrEmpty}" Converter2="{StaticResource BoolToVisibility}" />
		<conv:CombiningConverter x:Key="NotNullToVis" Converter1="{StaticResource NotNullOrEmpty}" Converter2="{StaticResource BoolToVisibility}" />

		<conv:CombiningConverter x:Key="TypeToVis" Converter1="{StaticResource IsType}" Converter2="{StaticResource BoolToVisibility}" />
		<conv:CombiningConverter x:Key="NotTypeToVis" Converter1="{StaticResource IsNotType}" Converter2="{StaticResource BoolToVisibility}" />
		
		<Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border Padding="{TemplateBinding Padding}" >
							<Grid SnapsToDevicePixels="False" Background="Transparent">
								<Grid.RowDefinitions>
									<RowDefinition Height="19"/>
									<RowDefinition Height="*"/>
								</Grid.RowDefinitions>
								<Grid>
									<Grid.LayoutTransform>
										<TransformGroup>
											<TransformGroup.Children>
												<TransformCollection>
													<RotateTransform Angle="-90"/>
												</TransformCollection>
											</TransformGroup.Children>
										</TransformGroup>
									</Grid.LayoutTransform>
									<Ellipse x:Name="circle" Stroke="DarkGray" HorizontalAlignment="Center" VerticalAlignment="Center" Width="19" Height="19"/>
									<Path x:Name="arrow" Stroke="#666" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="false" Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
								</Grid>
								<ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" VerticalAlignment="Top" SnapsToDevicePixels="True" Grid.Row="1" RecognizesAccessKey="True"/>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="true">
								<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#222"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
								<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border Padding="{TemplateBinding Padding}">
							<Grid SnapsToDevicePixels="False" Background="Transparent">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="19"/>
									<ColumnDefinition Width="*"/>
								</Grid.ColumnDefinitions>
								<Grid>
									<Grid.LayoutTransform>
										<TransformGroup>
											<TransformGroup.Children>
												<TransformCollection>
													<RotateTransform Angle="180"/>
												</TransformCollection>
											</TransformGroup.Children>
										</TransformGroup>
									</Grid.LayoutTransform>
									<Ellipse x:Name="circle" Stroke="DarkGray" HorizontalAlignment="Center" VerticalAlignment="Center" Width="19" Height="19"/>
									<Path x:Name="arrow" Stroke="#666" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="false" Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
								</Grid>
								<ContentPresenter HorizontalAlignment="Left" Margin="4,0,0,0" VerticalAlignment="Center" SnapsToDevicePixels="True" Grid.Column="1" RecognizesAccessKey="True"/>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="true">
								<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#222"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
								<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border Padding="{TemplateBinding Padding}">
							<Grid SnapsToDevicePixels="False" Background="Transparent">
								<Grid.RowDefinitions>
									<RowDefinition Height="19"/>
									<RowDefinition Height="*"/>
								</Grid.RowDefinitions>
								<Grid>
									<Grid.LayoutTransform>
										<TransformGroup>
											<TransformGroup.Children>
												<TransformCollection>
													<RotateTransform Angle="90"/>
												</TransformCollection>
											</TransformGroup.Children>
										</TransformGroup>
									</Grid.LayoutTransform>
									<Ellipse x:Name="circle" Stroke="DarkGray" HorizontalAlignment="Center" VerticalAlignment="Center" Width="19" Height="19"/>
									<Path x:Name="arrow" Stroke="#666" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="false" Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
								</Grid>
								<ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" VerticalAlignment="Top" SnapsToDevicePixels="True" Grid.Row="1" RecognizesAccessKey="True"/>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="true">
								<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#222"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
								<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderHeaderFocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Border>
							<Rectangle Stroke="Black" StrokeDashArray="1 2" StrokeThickness="1" Margin="0" SnapsToDevicePixels="true"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border Padding="{TemplateBinding Padding}">
							<Grid SnapsToDevicePixels="False" Background="Transparent">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="19"/>
									<ColumnDefinition Width="*"/>
								</Grid.ColumnDefinitions>

								<Grid Visibility="{Binding Path=CanExpand, Converter={StaticResource BoolToVisibility}, ConverterParameter=Event, UpdateSourceTrigger=PropertyChanged}">
									<Ellipse x:Name="circle" Stroke="DarkGray" HorizontalAlignment="Center" VerticalAlignment="Center" Width="19" Height="19"/>
									<Path x:Name="arrow" Stroke="#666" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="false" Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
								</Grid>
								<ContentPresenter HorizontalAlignment="Stretch" Margin="4,0,0,0" VerticalAlignment="Center" SnapsToDevicePixels="True" Grid.Column="1" RecognizesAccessKey="True"/>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="true">
								<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#222"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
								<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
			<Setter Property="VerticalContentAlignment" Value="Stretch"/>
			<Setter Property="BorderBrush" Value="Transparent"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Expander}" >
						<Border SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
							<DockPanel>
								<ToggleButton IsEnabled="{Binding Path=CanExpand, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"  x:Name="HeaderSite" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" Margin="1" MinHeight="0" MinWidth="0" Style="{StaticResource ExpanderDownHeaderStyle}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" DockPanel.Dock="Top" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
								<ContentPresenter x:Name="ExpandSite" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false" Visibility="Collapsed" DockPanel.Dock="Bottom"/>
							</DockPanel>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsExpanded" Value="true">
								<Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
							</Trigger>
							<Trigger Property="ExpandDirection" Value="Right">
								<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
								<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
								<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
							</Trigger>
							<Trigger Property="ExpandDirection" Value="Up">
								<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
								<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
								<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
							</Trigger>
							<Trigger Property="ExpandDirection" Value="Left">
								<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
								<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
								<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		
		<StackPanel x:Key="logTitle">
			<TextBlock  FontWeight="Bold" Foreground="{Binding Type, Mode=OneWay, Converter={StaticResource TypeToBrush}, UpdateSourceTrigger=PropertyChanged}" >
				[ <TextBlock FontWeight="Bold" Text="{Binding Type, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" /> ]
				<TextBlock FontWeight="Bold" FontSize="14" Text="{Binding Message, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
			</TextBlock>

			<TextBlock Text="{Binding Time, UpdateSourceTrigger=PropertyChanged}" />
		</StackPanel>

		<DataTemplate x:Key="logException" DataType="{x:Type local:LogEntry}">
			<StackPanel>
				<TextBlock Style="{StaticResource styleNormal}" Text="{Binding Key, UpdateSourceTrigger=PropertyChanged}" />
				<TextBlock Style="{StaticResource styleValue}" Text="{Binding Value, UpdateSourceTrigger=PropertyChanged}" TextWrapping="Wrap"/>
				<TextBlock/>
			</StackPanel>
		</DataTemplate>

		<DataTemplate x:Key="logValues" DataType="{x:Type local:LogEntry}">
			<TextBlock  
				Visibility="{Binding HasAnyValue, Mode=OneWay, Converter={StaticResource NullToVis}, UpdateSourceTrigger=PropertyChanged}">
				
				<TextBlock 
					Style="{Binding HasKey, Mode=OneWay, Converter={StaticResource BoolToStyle},UpdateSourceTrigger=PropertyChanged}" 
					Visibility="{Binding HasKey, Mode=OneWay, Converter={StaticResource BoolToVisibility}, UpdateSourceTrigger=PropertyChanged}" >
				
					<TextBlock Text="{Binding Key, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" /> : 
				</TextBlock>
					
				<TextBlock Style="{Binding HasKey, Mode=OneWay, Converter={StaticResource BoolToStyle},UpdateSourceTrigger=PropertyChanged}" 
						   Visibility="{Binding HasValue, Mode=OneWay, Converter={StaticResource BoolToVisibility}, UpdateSourceTrigger=PropertyChanged}">
					<TextBlock 
						Style="{Binding HasKey, Mode=OneWay, Converter={StaticResource NotBoolToStyle},UpdateSourceTrigger=PropertyChanged}" 
						Text="{Binding Value, Mode=OneWay}" TextWrapping="Wrap" />
				</TextBlock>	
			</TextBlock>		
		</DataTemplate>
	</UserControl.Resources>

	<StackPanel 
		Background="{Binding Type, Mode=OneWay, Converter={StaticResource TypeToBrushBg}, UpdateSourceTrigger=PropertyChanged}">
		
		<StackPanel >
			<Expander
				Margin="0,0,0,5"
				IsExpanded="{Binding Path=IsExpanded, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, ConverterParameter=Event}"
				Style="{StaticResource ExpanderStyle}"
				Header="{StaticResource logTitle}" Height="Auto">

				<StackPanel Margin="30,0,0,0" Visibility="{Binding Path=HasAnyData, Mode=OneWay, Converter={StaticResource BoolToVisibility}, UpdateSourceTrigger=PropertyChanged}">
					<StackPanel Margin="0,10,0,0" Visibility="{Binding Path=HasValues, Mode=OneWay, Converter={StaticResource BoolToVisibility}, UpdateSourceTrigger=PropertyChanged}">
						<ItemsControl ItemsSource="{Binding Values, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" ItemTemplate="{StaticResource logValues}" />
					</StackPanel>

					<Expander Margin="0,10,0,0" 
								Header="Exception data" 
								FontWeight="Bold"
								Visibility="{Binding Path=HasException, Mode=OneWay, Converter={StaticResource BoolToVisibility}, UpdateSourceTrigger=PropertyChanged}">
						<Border BorderThickness="1" BorderBrush="Black">
							<StackPanel DataContext="{Binding Exception}">
								<TextBlock Style="{StaticResource styleNormal}"  Text="Message" />
								<TextBlock Style="{StaticResource styleValue}" Text="{Binding Message, Mode=OneWay, FallbackValue=Unknown}" TextWrapping="WrapWithOverflow" />
								<TextBlock/>
								<TextBlock Style="{StaticResource styleNormal}" Text="TargetSite" />
								<TextBlock Style="{StaticResource styleValue}"  Text="{Binding TargetSite.Name, Mode=OneWay, FallbackValue=Unknown}" TextWrapping="WrapWithOverflow" />
								<TextBlock/>
								<TextBlock Style="{StaticResource styleNormal}" Text="Source" />
								<TextBlock Style="{StaticResource styleValue}"  Text="{Binding Source, Mode=OneWay, FallbackValue=Unknown}" TextWrapping="WrapWithOverflow" />
								<TextBlock/>
								<TextBlock Style="{StaticResource styleNormal}" Text="StackTrace" />
								<TextBlock Style="{StaticResource styleValue}"  Text="{Binding StackTrace, Mode=OneWay, FallbackValue=Unknown}" TextWrapping="WrapWithOverflow" />
								<TextBlock/>
							</StackPanel>
						</Border>
					</Expander>
				</StackPanel>
			</Expander>
			
			<Separator Margin="0,0,0,10"/>
		</StackPanel>
	</StackPanel>
</UserControl>
